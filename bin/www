#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webserver:server');
var http = require('http');

const admin = require("firebase-admin");
const { v4: uuidv4 } = require('uuid');
const serviceAccount = require("../fcmmsg.json");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Firebase Push 
 */
const registrationToken = 'eMLKfUFmoYw:APA91bE_H14CfoX6Ty5h0_61M9GPd0G5Z_rTaqGoy7qwBAPybJyrHnuxqcMh0YKuyTxB3cY-W-7xELqERACkEcXExxuENcpakvllDsy2yrEWZ6AdmTPC5fzv1FfOx2mkJYifRc_kEasF';

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  // storageBucket: "fcmmsg-cfe6a.appspot.com"
});

const storageRef = admin.storage().bucket('gs://fcmmsg-cfe6a.appspot.com');

// firebase storage에 업로드하는 함수
async function uploadFile(path, filename) {

  // Upload the File
  const storage = await storageRef.upload(path, {
    public: true,
    destination: `${filename}`,
    metadata: {
      firebaseStorageDownloadTokens: uuidv4(),
    }
  });

  // console.log(storage[0].metadata.mediaLink);
  return storage[0].metadata.mediaLink;
}

// // 업로드 실행
// (async() => {
//   const url = await uploadFile('./images/puppy.jpg', "my-image-1.jpg");
//   console.log(url);
// })();

// 푸시 알림 보내기
var imgname = 'dog.jpg';
var imgurl = 'https://firebasestorage.googleapis.com/v0/b/fcmmsg-cfe6a.appspot.com/o/' + imgname + '?alt=media';
let message = {
  notification: {
    title: '알림!!',
    body: '클라우드 메시지 전송이 잘 되는지 확인하기 위한, 메시지 입니다.',
    imageUrl: imgurl
  },
  token: registrationToken
};

// Send a message to the device corresponding to the provided
admin.messaging().send(message)
  .then((response) => {
    // Response is a message ID string.
    console.log('Successfully sent message:', response);
  })
  .catch((error) => {
    console.log('Error sending message:', error);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
